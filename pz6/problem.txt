Задание:
        1. Реализовать в виде шаблона функций рекурсивный алгоритм быстрой сортировки с выбором медианы.
        2. Реализовать в виде шаблона функций моди-фицированный алгоритм быстрой сортировки с делением на три подмассива.
        3. Реализовать в виде шаблона функций нерекурсивную восходящую версию алгоритма сортировки слиянием (для слияния отсортированных подмассивов использовать алгоритм двухпутевого слияния с построением битонной последовательности).
        4. Реализовать в виде шаблона функций рекурсивную нисходящую версию алгоритма сортировки слиянием (для слияния отсортированных подмассивов использовать алгоритм двухпутевого слияния с построением битонной последовательности). 
        5. Провести вычислительный эксперимент: один и тот же массив элементов типа int большой размерности (взять n= 10000, 100000, 1000000, 10000000) отсортировать по возрастанию с помощью:
    1. библиотечной функции qsort();
    2. sort (алгоритм STL);
    3. stable_sort (алгоритм STL);
    4. partial_sort (алгоритм STL);
    5. рекурсивного алгоритма быстрой сортировки с выбором медианы;
    6. модифицированного алгоритма быстрой сортировки с делением на три подмассива;
    7. нерекурсивного восходящего алгоритма сортировки слиянием;
    8. рекурсивного нисходящего алгоритма сортировки слиянием. 
Вычислить время работы каждого алгоритма.
В качестве входных данных рассмотреть следующие случаи:
    1. массив со случайным расположением не повторяющихся элементов;
    2. массив случайных чисел, в котором много повторяющихся элементов.
Для копирования образца массива (конкретный случай входных данных) в массив, который подлежит сортировки можно воспользоваться алгоритмом STL copy или функцией memcpy_s().
При формирования случайных чисел использовать генераторы и распределения случайных чисел библиотеки языка С++ (см. Приложение 1).
Провести сравнительный анализ времени работы алгоритмов сортировки при различных размерах массива и различных случаях входных данных.